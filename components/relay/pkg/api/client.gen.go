// Code generated by oto; DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/pkg/errors"
)

type relayClient struct {
	username string
	password string
	endpoint string
	cl       *http.Client
}

func NewRelayClient(endpoint, username, password string, timeout time.Duration) Relay {
	return &relayClient{
		username: username,
		password: password,
		endpoint: endpoint,
		cl:       &http.Client{Timeout: timeout},
	}
}

func (c *relayClient) Ban(ctx context.Context, req BanRequest) (*BanResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.Ban", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &BanResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) Block(ctx context.Context, req BlockRequest) (*BlockResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.Block", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &BlockResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) CreateChannel(ctx context.Context, req CreateChannelRequest) (*CreateChannelResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.CreateChannel", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &CreateChannelResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) DeleteChannel(ctx context.Context, req DeleteChannelRequest) (*DeleteChannelResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.DeleteChannel", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &DeleteChannelResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) DeleteMessage(ctx context.Context, req DeleteMessageRequest) (*DeleteMessageResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.DeleteMessage", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &DeleteMessageResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) Join(ctx context.Context, req JoinRequest) (*JoinResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.Join", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &JoinResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) Kick(ctx context.Context, req KickRequest) (*KickResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.Kick", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &KickResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) Leave(ctx context.Context, req LeaveRequest) (*LeaveResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.Leave", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &LeaveResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) Unban(ctx context.Context, req UnbanRequest) (*UnbanResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.Unban", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &UnbanResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}

func (c *relayClient) Unblock(ctx context.Context, req UnblockRequest) (*UnblockResponse, error) {
	body, err := json.Marshal(&req)
	if err != nil {
		return nil, errors.Wrap(err, "marshal")
	}
	request, err := http.NewRequestWithContext(
		ctx,
		"POST",
		fmt.Sprintf("%s/oto/Relay.Unblock", c.endpoint),
		bytes.NewReader(body))
	if err != nil {
		return nil, errors.Wrap(err, "request")
	}
	if c.username != "" {
		request.SetBasicAuth(c.username, c.password)
	}
	request.Header.Set("Content-Type", "application/json")
	resp, err := c.cl.Do(request)
	if err != nil {
		return nil, errors.Wrap(err, "http")
	}
	defer resp.Body.Close()
	body, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, errors.Wrap(err, "body")
	}
	if resp.StatusCode != 200 {
		if resp.StatusCode == 500 {
			return nil, errors.New(string(body))
		}
		return nil, fmt.Errorf("%d: %s", resp.StatusCode, string(body))
	}
	response := &UnblockResponse{}
	if err := json.Unmarshal(body, response); err != nil {
		return nil, errors.Wrap(err, "unmarshal")
	}
	return response, nil
}
